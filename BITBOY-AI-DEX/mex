#!/usr/bin/env bash
# ~/bin/aic - Unified AI DevOps & CodeWriter
# Single-file, verbose streaming, memory, git, project context, SSH integration

set -euo pipefail
IFS=$'\n\t'

# --- COLORS ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'

log() { printf "${BLUE}[%s]${NC} %s\n" "$(date '+%T')" "$*"; }
log_success() { log "${GREEN}$*${NC}"; }
log_warn() { log "${YELLOW}WARN: $*${NC}"; }
log_error() { echo -e "${RED}ERROR: $*${NC}" >&2; exit 1; }
log_info() { log "${CYAN}$*${NC}"; }
log_phase() {
    echo -e "\n${PURPLE}════════════════════════════════════════════════════════════════════════════════${NC}"
    log "${PURPLE}$*${NC}"
    echo -e "${PURPLE}════════════════════════════════════════════════════════════════════════════════${NC}"
}

# --- CONFIG PATHS ---
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"
SSH_DIR="$HOME/.ssh"
GIT_SSH_KEY="$SSH_DIR/id_ai_agent"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"

mkdir -p "$AI_HOME" "$PROJECTS_DIR" "$SSH_DIR"
chmod 700 "$SSH_DIR"

# --- Default AI Models ---
MODEL="${AI_MODEL:-codellama:7b}"
DEFAULT_MESSENGER_MODEL="gemma3:1b"
DEFAULT_COMBINATOR_MODEL="deepseek-r1:1.5b"
DEFAULT_TRADER_MODEL="2244-1"

MESSENGER_MODEL=""
COMBINATOR_MODEL=""
TRADER_MODEL=""

OLLAMA_BIN="$(command -v ollama || true)"

# --- DATABASE ---
init_db() {
    sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        prompt TEXT,
        response TEXT,
        project TEXT,
        language TEXT
    );" 2>/dev/null || true
    sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config (key TEXT PRIMARY KEY, value TEXT);" 2>/dev/null || true
}

load_config() {
    MESSENGER_MODEL=$(sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key='messenger_model';" 2>/dev/null || echo "$DEFAULT_MESSENGER_MODEL")
    COMBINATOR_MODEL=$(sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key='combinator_model';" 2>/dev/null || echo "$DEFAULT_COMBINATOR_MODEL") 
    TRADER_MODEL=$(sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key='trader_model';" 2>/dev/null || echo "$DEFAULT_TRADER_MODEL")
    log_info "Models loaded: Messenger=$MESSENGER_MODEL, Combinator=$COMBINATOR_MODEL, Trader=$TRADER_MODEL"
}

add_memory() {
    local prompt="$1" response="$2" project="${3:-}" language="${4:-}"
    sqlite3 "$MEMORY_DB" "INSERT INTO memories (prompt,response,project,language)
        VALUES ('${prompt//\'/\"}','${response//\'/\"}','$project','$language');" 2>/dev/null
}

search_memory() {
    local query="$1"
    sqlite3 -header -column "$MEMORY_DB" \
        "SELECT prompt, response FROM memories
         WHERE prompt LIKE '%$query%' OR response LIKE '%$query%'
         ORDER BY timestamp DESC LIMIT 3;" 2>/dev/null || echo "No memories found."
}

# --- SSH / Git ---
setup_ssh_key() {
    local key_content="$1"
    echo "$key_content" > "$GIT_SSH_KEY"
    chmod 600 "$GIT_SSH_KEY"
    cat > "$SSH_DIR/config" << EOF
Host github.com
    HostName github.com
    User git
    IdentityFile $GIT_SSH_KEY
    IdentitiesOnly yes
Host gitlab.com
    HostName gitlab.com
    User git
    IdentityFile $GIT_SSH_KEY
    IdentitiesOnly yes
Host bitbucket.org
    HostName bitbucket.org
    User git
    IdentityFile $GIT_SSH_KEY
    IdentitiesOnly yes
EOF
    chmod 600 "$SSH_DIR/config"
    log_success "SSH key configured at $GIT_SSH_KEY"
}

test_ssh() {
    ssh -T -o ConnectTimeout=5 -o StrictHostKeyChecking=no git@github.com 2>&1 | grep -q "successfully authenticated" &&
        log_success "SSH authentication working" || log_warn "SSH test inconclusive"
}

git_operation() {
    local op="$1" repo_path="${2:-.}" branch="${3:-}"
    
    if [[ ! -d "$repo_path/.git" ]]; then
        log_error "Not a git repository: $repo_path"
    fi
    
    if ! cd "$repo_path" 2>/dev/null; then
        log_error "Cannot access directory: $repo_path"
    fi
    
    log_phase "Git $op: $(basename "$PWD")"
    
    case "$op" in
        status)
            git status
            echo -e "\nRecent commits:"
            git log --oneline -5
            ;;
        pull)
            local current_branch=$(git branch --show-current)
            local target_branch="${branch:-$current_branch}"
            log_info "Pulling $target_branch from origin"
            GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git pull origin "$target_branch"
            ;;
        push)
            if git diff --quiet && git diff --cached --quiet; then 
                log_warn "No changes to push"
                return 0
            fi
            
            echo "Changes to be pushed:"
            git status --short
            echo
            read -p "Commit message: " commit_msg
            [[ -z "$commit_msg" ]] && commit_msg="Update $(date '+%Y-%m-%d %H:%M')"
            
            git add .
            git commit -m "$commit_msg"
            GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git push origin "$(git branch --show-current)"
            ;;
        sync)
            git_operation "pull" "$repo_path" "$branch"
            git_operation "push" "$repo_path" "$branch"
            ;;
        clone)
            if [[ -z "${branch:-}" ]]; then
                GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git clone "$repo_path" .
            else
                GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEY -o IdentitiesOnly=yes" git clone -b "$branch" "$repo_path" .
            fi
            ;;
        *) log_error "Unknown git operation: $op" ;;
    esac
}

# --- Project Context & Language ---
detect_language() {
    local context="$1"
    case "$context" in
        *python*|*py*|*import*|*def*) echo "python" ;;
        *bash*|*shell*|*sh*|*#!/bin*) echo "bash" ;;
        *javascript*|*js*|*node*|*console*) echo "javascript" ;;
        *html*|*<html*|*<div*) echo "html" ;;
        *css*|*style*|*{*}*) echo "css" ;;
        *docker*|*Dockerfile*) echo "docker" ;;
        *sql*|*SELECT*|*CREATE*) echo "sql" ;;
        *json*|*{*}*) echo "json" ;;
        *yaml*|*yml*|*---*) echo "yaml" ;;
        *) echo "text" ;;
    esac
}

get_project_context() {
    local dir="${1:-.}"
    local context=""
    
    if [[ -d "$dir/.git" ]]; then
        context+="Git repository: $(basename "$dir")\n"
        context+="Branch: $(git -C "$dir" branch --show-current 2>/dev/null || echo 'detached')\n"
        context+="Remote: $(git -C "$dir" remote get-url origin 2>/dev/null || echo 'none')\n"
    fi
    
    [[ -f "$dir/package.json" ]] && context+="Node.js project\n"
    [[ -f "$dir/requirements.txt" ]] && context+="Python project\n"
    [[ -f "$dir/Cargo.toml" ]] && context+="Rust project\n"
    [[ -f "$dir/go.mod" ]] && context+="Go project\n"
    
    local recent_files=$(find "$dir" -maxdepth 3 -type f \( -name "*.py" -o -name "*.js" -o -name "*.rs" -o -name "*.go" -o -name "*.sh" -o -name "*.md" \) -exec basename {} \; | head -5 | tr '\n' ' ')
    [[ -n "$recent_files" ]] && context+="Recent files: $recent_files\n"
    
    echo -e "$context"
}

# --- AI Streaming Worker ---
ensure_ollama_server() {
    if ! command -v ollama >/dev/null; then
        log_error "Ollama not installed. Please install from https://ollama.ai"
    fi
    
    if ! pgrep -f "ollama serve" >/dev/null; then 
        log "Starting Ollama server..."
        nohup ollama serve >/dev/null 2>&1 &
        sleep 3
    fi
}

run_worker_raw() {
    local model="$1" system_prompt="$2" conversation_history="$3"
    ensure_ollama_server
    
    local temperature=0.3 top_p=0.9
    local fifo_path=$(mktemp -u)
    mkfifo "$fifo_path"
    
    # Cleanup function
    cleanup() { 
        rm -f "$fifo_path" 
        kill "$ollama_pid" 2>/dev/null || true
    }
    trap cleanup EXIT INT TERM
    
    local response_buffer=""
    
    # Start Ollama in background
    (
        "$OLLAMA_BIN" run --verbose "$model" "$system_prompt
$conversation_history" --temperature "$temperature" --top-p "$top_p" > "$fifo_path" 2>&1
    ) &
    local ollama_pid=$!
    
    # Read from FIFO with timeout
    while IFS= read -r -t 10 line < "$fifo_path" || true; do
        [[ -z "$line" ]] && continue
        
        if [[ "$line" =~ ^\>\>\> ]]; then 
            echo -e "${YELLOW}$line${NC}"
        elif [[ "$line" =~ ^\{.*\}$ ]]; then
            # Robust JSON parsing
            if tok=$(echo "$line" | jq -r '.response? // empty' 2>/dev/null); then
                if [[ -n "$tok" ]]; then
                    printf '%s' "$tok"
                    response_buffer+="$tok"
                fi
            fi
        else 
            echo -e "${BLUE}$line${NC}"
        fi
    done
    
    # Wait for process completion
    wait "$ollama_pid" 2>/dev/null || true
    
    echo  # Final newline
    echo "$response_buffer"
}

# --- Code Generation ---
generate_code() {
    local prompt="$1" project_context="$2" language="$3"
    local sys_prompt="You are an expert code generator. Write clean, working $language code.

Project Context:
$project_context

Requirements:
- Output only code, no explanation
- Include necessary imports/dependencies
- Add comments for complex logic
- Ensure code is production-ready

User Request: $prompt"
    
    run_worker_raw "$MODEL" "$sys_prompt" ""
}

code_writer() {
    local prompt="$*"
    local project_dir="$PWD"
    local project_name=$(basename "$project_dir")
    
    log_phase "CodeWriter - Project: $project_name"
    
    local project_context=$(get_project_context "$project_dir")
    local language=$(detect_language "$prompt")
    local memories=$(search_memory "$prompt")
    
    log_info "Detected language: $language"
    [[ -n "$project_context" ]] && echo -e "Project context:\n$project_context"
    [[ "$memories" != "No memories found." ]] && log_info "Related memories found"
    
    local response=$(generate_code "$prompt" "$project_context" "$language")
    add_memory "$prompt" "$response" "$project_name" "$language"
    
    echo -e "\n${GREEN}=== GENERATED CODE ===${NC}"
    echo "$response"
    
    echo
    read -p "Save to file? (Enter filename or press Enter to skip): " filename
    if [[ -n "$filename" ]]; then
        echo "$response" > "$filename"
        log_success "Saved to $filename"
        # Make executable if it's a script
        if [[ "$filename" =~ \.(sh|bash|py)$ ]]; then
            chmod +x "$filename" 2>/dev/null || true
        fi
    fi
}

# --- CLI ---
show_help() {
cat << EOF
Usage: aic [COMMAND] [OPTIONS]

Universal AI DevOps & CodeWriter

Commands:
  code "prompt"           Generate code for current project
  git <op> [path]         Git operations: status, pull, push, sync, clone
  memory [search]         Search code memory
  setup-ssh "key"         Setup SSH key for Git operations
  config                  Show current configuration
  help                    Show this help

Git Operations:
  aic git status [path]   Show repository status
  aic git pull [path]     Pull latest changes
  aic git push [path]     Push changes with auto-commit
  aic git sync [path]     Pull + push changes
  aic git clone url [dir] Clone repository

Examples:
  aic code "Create a Python Flask API with MongoDB"
  aic git status ~/projects/myapp
  aic setup-ssh "ssh-rsa AAAA..."

Configuration:
  Set AI_MODEL environment variable to change model (default: codellama:7b)
EOF
}

main() {
    init_db
    load_config
    
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    case "$1" in
        code|generate|write)
            shift
            code_writer "$*"
            ;;
        git)
            shift
            if [[ $# -eq 0 ]]; then
                git_operation "status" "."
            else
                git_operation "$1" "${2:-.}" "${3:-}"
            fi
            ;;
        memory|remember)
            shift
            search_memory "${*:-.}"
            ;;
        setup-ssh)
            if [[ $# -lt 2 ]]; then
                log_error "SSH key content required: aic setup-ssh 'SSH_PRIVATE_KEY'"
            fi
            setup_ssh_key "$2"
            test_ssh
            ;;
        config|settings)
            log_phase "Current Configuration"
            echo "AI_HOME: $AI_HOME"
            echo "Default Model: $MODEL"
            echo "Messenger Model: $MESSENGER_MODEL"
            echo "Combinator Model: $COMBINATOR_MODEL"
            echo "Trader Model: $TRADER_MODEL"
            echo "Projects Directory: $PROJECTS_DIR"
            echo "SSH Key: $GIT_SSH_KEY"
            if [[ -f "$GIT_SSH_KEY" ]]; then
                echo "SSH Status: Configured"
            else
                echo "SSH Status: Not configured"
            fi
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            code_writer "$*"
            ;;
    esac
}

# Run if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
