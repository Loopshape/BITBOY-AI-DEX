#!/usr/bin/env zsh
# Unified AI Runner - Device-aware, Real-time, Git-integrated
set -euo pipefail
IFS=$'\n\t'

# --- DEVICE DETECTION ---
if [[ -n "$TERMUX_VERSION" ]]; then
    AI_HOME="$HOME/.ai_builder"
    PROJECTS_DIR="$HOME/.ai-agent"
    DEVICE="TERMUX"
elif [[ "$(uname)" == "Darwin" ]]; then
    AI_HOME="$HOME/.ai_builder"
    PROJECTS_DIR="$HOME/.ai-agent"
    DEVICE="MACOS"
else
    AI_HOME="$HOME/.ai_builder"
    PROJECTS_DIR="$HOME/.ai-agent"
    DEVICE="LINUX"
fi

mkdir -p "$AI_HOME" "$PROJECTS_DIR"

# --- COLORS ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'

# --- GIT CONFIG ---
GIT_REPO="$AI_HOME/BITBOY-AI-DEX"
GIT_REMOTE="git@github.com:Loopshape/BITBOY-AI-DEX.git"
mkdir -p "$GIT_REPO"
cd "$GIT_REPO"
git init 2>/dev/null || true
git remote remove origin 2>/dev/null || true
git remote add origin "$GIT_REMOTE"

# --- FUNCTIONS ---
log() { printf "${BLUE}[%s]${NC} %s\n" "$(date '+%T')" "$*"; }
log_success() { log "${GREEN}$*${NC}"; }
log_warn() { log "${YELLOW}WARN: $*${NC}"; }
log_error() { log "${RED}ERROR: $*${NC}"; exit 1; }
log_info() { log "${CYAN}$*${NC}"; }

process_input() {
    local input="$1"
    [[ "$input" =~ https?:// ]] && echo "[WEB URL DETECTED]: $input"
    [[ -f "$input" ]] && echo "[FILE DETECTED]: $input"
    [[ -d "$input" ]] && echo "[DIRECTORY DETECTED]: $input"
    echo "[HOST]: $(hostname)"
    echo "[DEVICE]: $DEVICE"
}

# --- AI WORKER (Ollama) ---
OLLAMA_BIN=$(command -v ollama || true)
run_worker_raw() {
    local model="$1" system_prompt="$2" conversation_history="$3"
    local fifo_path=$(mktemp -u)
    mkfifo "$fifo_path"
    local response_buffer=""

    # Start Ollama in background
    ("$OLLAMA_BIN" run --verbose "$model" "$system_prompt\n$conversation_history" 2>&1 > "$fifo_path") &
    local ollama_pid=$!

    while IFS= read -r line < "$fifo_path"; do
        [[ -z "$line" ]] && continue
        if [[ "$line" =~ ^\>\>\> ]]; then
            echo -e "${YELLOW}$line${NC}"
        elif [[ "$line" =~ ^\{.*\}$ ]]; then
            local response_token=$(echo "$line" | jq -r '.response? // empty' 2>/dev/null)
            local done_status=$(echo "$line" | jq -r '.done? // false' 2>/dev/null)
            [[ -n "$response_token" ]] && printf '%s' "$response_token" && response_buffer+="$response_token"
            [[ "$done_status" == "true" ]] && printf '\n'
        else
            echo -e "${BLUE}$line${NC}"
        fi
    done

    wait "$ollama_pid" 2>/dev/null || true
    rm -f "$fifo_path"
    echo "$response_buffer"
}

# --- TRIUMVIRATE AGENT ---
run_triumvirate_agent() {
    local user_prompt="$*"
    local task_id=$(echo -n "$user_prompt$(date +%s%N)$RANDOM" | sha256sum | cut -c1-16)
    local task_dir="$PROJECTS_DIR/$task_id"
    mkdir -p "$task_dir"
    log_success "Task ID: $task_id | Workspace: $task_dir"

    process_input "$user_prompt"

    local messenger_prompt="You are MESSENGER. Tools: list_directory, web_search, read_file. User request: $user_prompt"
    local combinator_prompt="You are COMBINATOR. Tools: write_file. User request: $user_prompt"
    local trader_prompt="You are TRADER. Synthesize Messenger & Combinator outputs. Use [FINAL_ANSWER]."

    log_info "Starting Messenger..."
    local messenger_log="$task_dir/messenger.log"
    run_worker_raw "gemma3:1b" "$messenger_prompt" "" > "$messenger_log" 2>&1 &
    local messenger_pid=$!

    log_info "Starting Combinator..."
    local combinator_log="$task_dir/combinator.log"
    run_worker_raw "deepseek-r1:1.5b" "$combinator_prompt" "" > "$combinator_log" 2>&1 &
    local combinator_pid=$!

    # Spinner while async workers run
    local spinner='/-\|'
    printf "${CYAN}Brainstorming... ${NC}"
    local i=0
    while kill -0 "$messenger_pid" 2>/dev/null || kill -0 "$combinator_pid" 2>/dev/null; do
        printf "\b%s" "${spinner:i++%${#spinner}:1}"
        sleep 0.1
    done
    printf "\b Done.\n"

    local messenger_response=$(<"$messenger_log")
    local combinator_response=$(<"$combinator_log")

    log_info "Starting Trader (live)..."
    local trader_response=$(run_worker_raw "2244-1" "$trader_prompt" "$messenger_response\n$combinator_response")

    # Save final answer to Git
    if echo "$trader_response" | grep -q '\[FINAL_ANSWER\]'; then
        log_success "Trader produced [FINAL_ANSWER]"
        mkdir -p "$GIT_REPO/answers"
        echo "$trader_response" > "$GIT_REPO/answers/$task_id.txt"
        cd "$GIT_REPO"
        git add answers/*.txt
        git commit -m "Auto commit: $task_id"
        git push origin main
    else
        log_warn "No [FINAL_ANSWER] produced."
    fi
}

# --- MAIN ---
[[ $# -eq 0 ]] && { echo "Usage: $0 \"Your AI prompt\""; exit 0; }
run_triumvirate_agent "$*"
